The parser produces a big dictionary of of Alignment structures, each
of which associates text (a span of text) with logic (that corresponds
to the text in meaning.)  These are separated here but probably all
need to be visualized together since the logic is all connected.

In these examples the logic strings are either definitions of
predicates, or assertions.  The syntax is a slight extension of Anser
Set Programming syntax: 'a :- b' stands for 'b implies a', a period
ends an assertion, and anything after a '%' is a comment.  So for
example 'q3(X) :- q1(X). q3(X) :- q2(X).' means 'if q1(X) or q3(X)
then q3(X)' and my extension 'q2(X) =def= schoolmate(X, "Lowell").'
is expanded to 'q2(X) :- schoolmate(X, "Lowell"). schoolmate(X,
"Lowell") :- q2(X).'

------------------------------------------------------------
Sentence: To begin with, Lesley is a close friend of Fernando
{'rule1': Alignment(text='Lesley is a close friend of Fernando', logic='friend("Lesley", "Fernando"). %rule1')}
Sentence: Moreover, being a close friend of Fernando or a schoolmate of Lowell is sufficient for being a great-grandfather of Leroy
{'q1(X)': Alignment(text='being a close friend of Fernando', logic='q1(X) =def= friend(X, "Fernando").'),
 'q2(X)': Alignment(text='a schoolmate of Lowell', logic='q2(X) =def= schoolmate(X, "Lowell").'),
 'q3(X)': Alignment(text='being a great-grandfather of Leroy', logic='q3(X) =def= great_grandfather(X, "Leroy").'),
 'rule2': Alignment(text='q1(X) or q2(X) is sufficient for q3(X)', logic='q3(X) :- q1(X). q3(X) :- q2(X). %rule2')}
Sentence: Lesley is a great-grandfather of Leroy
{'rule3': Alignment(text='Lesley is a great-grandfather of Leroy', logic='query_true :- great_grandfather("Lesley", "Leroy"). %query')}

The other CoT examples:
------------------------------------------------------------
Sentence: Whoever is not a great-grandfather of Clyde is a stepbrother of Brian
{'p1(X)': Alignment(text='not a great-grandfather of Clyde', logic='p1(X) =def= -great_grandfather(X, "Clyde").'),
 'p2(X)': Alignment(text='a stepbrother of Brian', logic='p2(X) =def= stepbrother(X, "Brian").'),
 'rule1': Alignment(text='Whoever is p1(X) is p2(X)', logic='p2(X) :- p1(X). %rule1')}
Sentence: Being an ancestor of Dana is sufficient for not being a great-grandfather of Clyde
{'q1(X)': Alignment(text='Being an ancestor of Dana', logic='q1(X) =def= ancestor(X, "Dana").'),
 'q2(X)': Alignment(text='not being a great-grandfather of Clyde', logic='q2(X) =def= -great_grandfather(X, "Clyde").'),
 'rule2': Alignment(text='q1(X) is sufficient for q2(X)', logic='q2(X) :- q1(X). %rule2')}
Sentence: Everyone who is an ancestor of Dana is a stepbrother of Brian, too
{'r1(X)': Alignment(text='an ancestor of Dana', logic='r1(X) =def= ancestor(X, "Dana").'),
 'r2(X)': Alignment(text='a stepbrother of Brian', logic='r2(X) =def= stepbrother(X, "Brian").'),
 'rule3': Alignment(text='Everyone who is r1(X) is r2(X), too', logic='r1(someone). query_true:- r2(someone). %query')}
------------------------------------------------------------
Sentence: Every infrequent user of Paul Mitchell shampoo is either a rare consumer of Nioxin shampoo or a loyal buyer of Caress soap, or both
{'p1(X)': Alignment(text='infrequent user of Paul Mitchell shampoo', logic='p1(X) =def= infrequent_user(X, "Paul Mitchell shampoo").'),
 'p2(X)': Alignment(text='a rare consumer of Nioxin shampoo', logic='p2(X) =def= rare_consumer(X, "Nioxin shampoo").'),
 'p3(X)': Alignment(text='a loyal buyer of Caress soap', logic='p3(X) =def= regular_consumer(X, "Caress soap").'),
 'rule1': Alignment(text='Every p1(X) is either p2(X) or p3(X), or both', logic='1 {p2(X); p3(X)} :- p1(X). %rule1')}
Sentence: No regular consumer of Lush soap is a rare consumer of Nioxin shampoo and, in the same time, a loyal buyer of Caress soap
{'q1(X)': Alignment(text='regular consumer of Lush soap', logic='q1(X) =def= regular_consumer(X, "Lush soap").'),
 'q2(X)': Alignment(text='a rare consumer of Nioxin shampoo', logic='q2(X) =def= rare_consumer(X, "Nioxin shampoo").'),
 'q3(X)': Alignment(text='a loyal buyer of Caress soap', logic='q3(X) =def= regular_consumer(X, "Caress soap").'),
 'rule2': Alignment(text='No q1(X) is q2(X) and, in the same time, q3(X)', logic='{q2(X); q3(X)} 1 :- q1(X). %rule2')}
Sentence: whoever is an infrequent user of Paul Mitchell shampoo is not a regular consumer of Lush soap
{'r1(X)': Alignment(text='infrequent user of Paul Mitchell shampoo', logic='r1(X) =def= infrequent_user(X, "Paul Mitchell shampoo").'),
 'r2(X)': Alignment(text='not a regular consumer of Lush soap', logic='r2(X) =def= -regular_consumer(X, "Lush soap").'),
 'rule3': Alignment(text='whoever is an r1(X) is r2(X)', logic='r1(someone). query_true :- r2(someone). %query')}
