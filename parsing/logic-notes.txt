claims = [
    'To begin with, Lesley is a close friend of Fernando',
    'Moreover, being a close friend of Fernando or a schoolmate of Lowell is sufficient for being a great-grandfather of Leroy',
    'Lesley is a great-grandfather of Leroy',  #hyp
    'Whoever is not a great-grandfather of Clyde is a stepbrother of Brian',
    'Being an ancestor of Dana is sufficient for not being a great-grandfather of Clyde',
    'Everyone who is an ancestor of Dana is a stepbrother of Brian, too', #hyp
    'Every infrequent user of Paul Mitchell shampoo is either a rare consumer of Nioxin shampoo or a loyal buyer of Caress soap, or both',
    'No regular consumer of Lush soap is a rare consumer of Nioxin shampoo and, in the same time, a loyal buyer of Caress soap',
    'whoever is an infrequent user of Paul Mitchell shampoo is not a regular consumer of Lush soap', #hyp
]

to_logical_form_md = {
    # INPUT1
    claims[0]: Atom('friend(Lesley, Fernando)'),
    claims[1]: AllX(Implication(
        Or((Atom('friend(X, Fernando)'), 
            Atom('schoolmate(X, Lowell)'))),
        Atom('greatgrandfather(X, Leroy)')
    )),
    # hypothesis
    claims[2]: Atom('greatgrandfather(Lesley, Leroy)'),
    # INPUT2
    claims[3]: AllX(Implication(
        Not(Atom('greatgrandfather(X, Clyde)')),
        Atom('stepbrother(X, Brian)')
    )),
    claims[4]: AllX(Implication(
        Atom('ancestor(X, Dana)'),
        Not(Atom('greatgrandfather(X, Clyde)'))
    )),
    # hypothesis
    claims[5]: AllX(Implication(
        Atom('ancestor(X, Dana)'),
        Atom('stepbrother(X, Brian)')
    )),
    # INPUT3
    claims[6]: AllX(Implication(
        Atom('user(X, PaulMitchellShampoo)'),
        Or((
            Atom('consumer(X, NioxinShampoo)'),
            Atom('buyer(X, CaressSoap)')
        ))
    )),
    claims[7]: AllX(Implication(
        Atom('consumer(X, LushSoap)'),
        Not(And((
            Atom('consumer(X, NioxinShampoo)'),
            Atom('buyer(X, CaressSoap)')
        )))
    )),
    # hypothesis
    claims[8]: AllX(Implication(
        Atom('user(X, PaulMitchellShampoo)'),
        Not(Atom('consumer(X, LushSoap)'))
    )),
}
